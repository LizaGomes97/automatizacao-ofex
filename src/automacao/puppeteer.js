// src/automacao/puppeteer.js
const puppeteer = require("puppeteer");
const fs = require("fs");

// Configura√ß√µes b√°sicas
const CONFIG = {
  matricula: "309515", // Substitua pela sua matr√≠cula
  urlSistema: "https://tcdrsil.rd.com.br/portal/tc/default/AtendimentoWindow",
  tempoEspera: 2000, // Tempo de espera entre a√ß√µes (2 segundos)
  diretorioSaida: "./dados", // Diret√≥rio para salvar resultados
  modoDebug: true, // Ativa capturas de tela para debug
};

// Fun√ß√£o principal para automatizar a consulta
async function consultarCPF(cpf) {
  console.log(`üîÑ Iniciando consulta para CPF: ${cpf}`);

  // Verifica se o diret√≥rio de sa√≠da existe
  if (!fs.existsSync(CONFIG.diretorioSaida)) {
    fs.mkdirSync(CONFIG.diretorioSaida, { recursive: true });
  }

  // Inicia o navegador
  const browser = await puppeteer.launch({
    headless: false, // Vis√≠vel durante desenvolvimento (mude para true em produ√ß√£o)
    defaultViewport: { width: 1366, height: 768 },
  });

  try {
    const page = await browser.newPage();

    // Fun√ß√£o auxiliar para capturar telas no modo debug
    async function capturarTela(nome) {
      if (CONFIG.modoDebug) {
        await page.screenshot({
          path: `${CONFIG.diretorioSaida}/${nome}-${Date.now()}.png`,
          fullPage: true,
        });
      }
    }

    // 1. Acessar o sistema
    console.log("üåê Acessando o sistema...");
    await page.goto(CONFIG.urlSistema);
    await capturarTela("01-pagina-inicial");

    // 2. Fazer login com a matr√≠cula
    console.log("üîë Realizando login...");
    await page.waitForSelector('input[id*="matricula"]');
    await page.type('input[id*="matricula"]', CONFIG.matricula);
    await capturarTela("02-matricula-digitada");

    // Clica no bot√£o de login
    await page.click(
      'button.botao-login, button[id*="login"], button:has-text("‚Üí")'
    );
    console.log("‚úÖ Login realizado");

    // Aguarda carregamento da p√°gina principal
    await page.waitForTimeout(CONFIG.tempoEspera);
    await capturarTela("03-pagina-principal");

    // 3. Buscar cliente por CPF
    console.log(`üîç Buscando CPF: ${cpf}...`);
    await page.waitForSelector('input[placeholder*="CPF"], input[id*="cpf"]');
    await page.type('input[placeholder*="CPF"], input[id*="cpf"]', cpf);
    await capturarTela("04-cpf-digitado");

    // Clica no bot√£o de busca
    await page.click(
      'button:near(input[placeholder*="CPF"]), button:has-text("‚Üí")'
    );
    await page.waitForTimeout(CONFIG.tempoEspera);
    await capturarTela("05-resultados-busca");

    // 4. Capturar informa√ß√µes do cliente
    console.log("üìã Capturando informa√ß√µes do cliente...");
    const dadosCliente = await page.evaluate(() => {
      // Fun√ß√£o executada no contexto do navegador
      const dados = {
        nome: "",
        status: "",
        tipoCliente: "",
      };

      // Tenta obter o nome do cliente
      const elementoNome = document.querySelector(
        ".cliente-item div:first-child"
      );
      if (elementoNome) {
        dados.nome = elementoNome.textContent.trim();
      }

      // Tenta obter o status
      const elementoStatus = document.querySelector(
        ".status-aberto, .status-finalizado"
      );
      if (elementoStatus) {
        dados.status = elementoStatus.textContent.trim();
      }

      // Verifica tipo do cliente
      if (dados.nome.includes("UNIVERS")) {
        dados.tipoCliente = "Univers";
      } else {
        dados.tipoCliente = "Normal";
      }

      return dados;
    });

    console.log("Dados capturados:", dadosCliente);

    // 5. Tenta atender o cliente
    console.log("üë§ Atendendo cliente...");
    try {
      await page.click(".btn-atender");
      await page.waitForTimeout(CONFIG.tempoEspera);
      await capturarTela("06-cliente-atendido");
    } catch (e) {
      console.log("‚ö†Ô∏è N√£o foi poss√≠vel atender o cliente automaticamente");
    }

    // 6. Solicitar impress√£o OFEX
    console.log("üñ®Ô∏è Solicitando impress√£o...");
    try {
      // Tenta encontrar algum bot√£o ou menu de impress√£o
      await page.click('button:has-text("Imprimir"), a:has-text("Imprimir")');
      await page.waitForTimeout(CONFIG.tempoEspera);
      await capturarTela("07-impressao-solicitada");
      console.log("‚úÖ Impress√£o solicitada");
    } catch (e) {
      console.log("‚ö†Ô∏è N√£o foi poss√≠vel solicitar impress√£o automaticamente");
    }

    // 7. Salvar os dados em arquivo
    const nomeArquivo = `${
      CONFIG.diretorioSaida
    }/cliente-${cpf}-${Date.now()}.json`;
    fs.writeFileSync(nomeArquivo, JSON.stringify(dadosCliente, null, 2));
    console.log(`üíæ Dados salvos em: ${nomeArquivo}`);

    return dadosCliente;
  } catch (erro) {
    console.error("‚ùå Erro durante a automa√ß√£o:", erro);
    await capturarTela("erro");
    throw erro;
  } finally {
    // Fechar o navegador ao terminar
    await browser.close();
    console.log("üèÅ Automa√ß√£o finalizada");
  }
}

module.exports = { consultarCPF };
