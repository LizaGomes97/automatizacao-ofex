// Automa√ß√£o Terminal Drogasil
// Script para console - vers√£o 1.0

// Configura√ß√µes da automa√ß√£o
const config = {
    // Matr√≠cula para login (substitua pela matr√≠cula real)
    matricula: "309515",
    
    // CPF para busca (substitua pelo CPF real)
    cpf: "076954805",
    
    // Tempo de espera entre a√ß√µes (milissegundos)
    tempoEspera: 800,
    
    // Log detalhado das a√ß√µes
    logDetalhado: true,
    
    // Auto atendimento (automaticamente clica em "Atender" quando encontrar o cliente)
    autoAtendimento: true,
    
    // Auto imprimir OFEX (se dispon√≠vel)
    autoImprimirOFEX: false
};

// Estado da automa√ß√£o
const estado = {
    iniciado: false,
    loggedIn: false,
    cpfBuscado: false,
    clienteEncontrado: false,
    clienteAtendido: false,
    ofexGerado: false,
    concluido: false,
    erro: null
};

// Utilit√°rios para a automa√ß√£o
const utils = {
    // Espera um tempo determinado
    esperar: function(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    },
    
    // Tentativa de encontrar elemento com retry
    encontrarElemento: async function(seletor, tipoSeletor = 'css', maxTentativas = 5, intervalo = 500) {
        let elemento = null;
        let tentativas = 0;
        
        while (!elemento && tentativas < maxTentativas) {
            try {
                if (tipoSeletor === 'css') {
                    elemento = document.querySelector(seletor);
                } else if (tipoSeletor === 'id') {
                    elemento = document.getElementById(seletor);
                } else if (tipoSeletor === 'xpath') {
                    elemento = document.evaluate(
                        seletor, document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null
                    ).singleNodeValue;
                }
                
                if (elemento) {
                    return elemento;
                }
            } catch (err) {
                console.error(`Erro ao buscar elemento ${seletor}:`, err);
            }
            
            tentativas++;
            await this.esperar(intervalo);
        }
        
        if (!elemento) {
            throw new Error(`Elemento n√£o encontrado: ${seletor} (${tipoSeletor})`);
        }
        
        return elemento;
    },
    
    // Clica em um elemento
    clicar: async function(elemento, descri√ß√£o = "elemento") {
        if (typeof elemento === 'string') {
            elemento = await this.encontrarElemento(elemento);
        }
        
        if (config.logDetalhado) {
            console.log(`üñ±Ô∏è Clicando em ${descri√ß√£o}`);
        }
        
        try {
            elemento.click();
            await this.esperar(config.tempoEspera);
            return true;
        } catch (err) {
            console.error(`Erro ao clicar em ${descri√ß√£o}:`, err);
            throw err;
        }
    },
    
    // Preenche um campo
    preencher: async function(elemento, valor, descri√ß√£o = "campo") {
        if (typeof elemento === 'string') {
            elemento = await this.encontrarElemento(elemento);
        }
        
        if (config.logDetalhado) {
            console.log(`‚úèÔ∏è Preenchendo ${descri√ß√£o} com valor: ${valor}`);
        }
        
        try {
            // Limpar o campo primeiro
            elemento.value = '';
            
            // Focar no elemento
            elemento.focus();
            
            // Digitar caractere por caractere com pequeno delay para simular digita√ß√£o humana
            for (let i = 0; i < valor.length; i++) {
                elemento.value += valor[i];
                await this.esperar(50); // Pequeno delay entre caracteres
            }
            
            // Disparar evento de input
            elemento.dispatchEvent(new Event('input', { bubbles: true }));
            
            await this.esperar(config.tempoEspera);
            return true;
        } catch (err) {
            console.error(`Erro ao preencher ${descri√ß√£o}:`, err);
            throw err;
        }
    },
    
    // Verifica se um elemento existe
    elementoExiste: function(seletor, tipoSeletor = 'css') {
        try {
            let elemento = null;
            if (tipoSeletor === 'css') {
                elemento = document.querySelector(seletor);
            } else if (tipoSeletor === 'id') {
                elemento = document.getElementById(seletor);
            } else if (tipoSeletor === 'xpath') {
                elemento = document.evaluate(
                    seletor, document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null
                ).singleNodeValue;
            }
            
            return !!elemento;
        } catch {
            return false;
        }
    },
    
    // Verifica se estamos na p√°gina de login
    estaNaPaginaLogin: function() {
        return this.elementoExiste('txtAtendente', 'id');
    },
    
    // Verifica se estamos na p√°gina principal
    estaNaPaginaPrincipal: function() {
        return this.elementoExiste('btnNovoAtendimento', 'id') || 
               this.elementoExiste('#btNovoAtendimento') ||
               this.elementoExiste('//button[contains(text(), "Novo Atendimento")]', 'xpath');
    },
    
    // Verifica se h√° clientes na lista
    clientesDisponiveis: function() {
        const clientes = document.querySelectorAll('.cliente-item');
        return clientes.length > 0;
    },
    
    // Formata o log
    log: function(mensagem, tipo = 'info') {
        const estilos = {
            info: 'color: #2196F3',
            sucesso: 'color: #4CAF50',
            erro: 'color: #F44336',
            aviso: 'color: #FF9800',
        };
        
        const horario = new Date().toLocaleTimeString();
        console.log(`%c[${horario}] ${mensagem}`, estilos[tipo]);
    }
};

// Opera√ß√µes da automa√ß√£o
const operacoes = {
    // Inicia a automa√ß√£o
    iniciar: async function() {
        utils.log('Iniciando automa√ß√£o para Terminal Drogasil', 'info');
        utils.log(`Matr√≠cula: ${config.matricula} | CPF: ${config.cpf}`, 'info');
        
        estado.iniciado = true;
        
        try {
            // Verifica se estamos na p√°gina certa
            if (!utils.estaNaPaginaLogin() && !utils.estaNaPaginaPrincipal()) {
                throw new Error('P√°gina n√£o reconhecida. Abra a p√°gina do Terminal Drogasil antes de executar.');
            }
            
            // Realizar login, se necess√°rio
            if (utils.estaNaPaginaLogin()) {
                await this.realizarLogin();
            } else {
                utils.log('J√° logado no sistema', 'sucesso');
                estado.loggedIn = true;
            }
            
            // Procede com a busca de CPF ap√≥s o login
            if (estado.loggedIn) {
                await this.buscarCPF();
            }
            
            // Atende o cliente, se encontrado
            if (estado.clienteEncontrado && config.autoAtendimento) {
                await this.atenderCliente();
            }
            
            // Gera OFEX, se configurado
            if (estado.clienteAtendido && config.autoImprimirOFEX) {
                await this.imprimirOFEX();
            }
            
            // Finaliza a automa√ß√£o
            estado.concluido = true;
            utils.log('Automa√ß√£o conclu√≠da com sucesso!', 'sucesso');
            
        } catch (erro) {
            estado.erro = erro.message;
            utils.log(`Erro durante a automa√ß√£o: ${erro.message}`, 'erro');
            console.error(erro);
        }
        
        return estado;
    },
    
    // Realiza login
    realizarLogin: async function() {
        utils.log('Realizando login...', 'info');
        
        try {
            // Encontra o campo de matr√≠cula
            const campoMatricula = await utils.encontrarElemento('txtAtendente', 'id');
            
            // Preenche a matr√≠cula
            await utils.preencher(campoMatricula, config.matricula, 'campo de matr√≠cula');
            
            // Encontra e clica no bot√£o de login
            const botaoLogin = document.querySelector('[id="buttonAtendente"]') || 
                              document.querySelector('.botao-login') ||
                              document.querySelector('button[type="submit"]');
            
            if (!botaoLogin) {
                throw new Error('Bot√£o de login n√£o encontrado');
            }
            
            await utils.clicar(botaoLogin, 'bot√£o de login');
            
            // Aguarda o redirecionamento 
            await utils.esperar(2000);
            
            // Verifica se o login foi bem sucedido
            if (utils.estaNaPaginaPrincipal()) {
                utils.log('Login realizado com sucesso!', 'sucesso');
                estado.loggedIn = true;
            } else {
                throw new Error('Falha no login. Verifique a matr√≠cula.');
            }
        } catch (erro) {
            utils.log(`Erro ao realizar login: ${erro.message}`, 'erro');
            throw erro;
        }
    },
    
    // Busca por CPF
    buscarCPF: async function() {
        if (!estado.loggedIn) {
            throw new Error('√â necess√°rio estar logado para buscar CPF');
        }
        
        utils.log(`Buscando CPF: ${config.cpf}...`, 'info');
        
        try {
            // Encontra o campo de CPF
            const campoCPF = await utils.encontrarElemento('#cpf') || 
                            await utils.encontrarElemento('//input[@id="cpf"]', 'xpath') ||
                            await utils.encontrarElemento('//input[contains(@placeholder, "CPF")]', 'xpath');
            
            if (!campoCPF) {
                throw new Error('Campo de CPF n√£o encontrado');
            }
            
            // Preenche o CPF
            await utils.preencher(campoCPF, config.cpf, 'campo de CPF');
            
            // Encontra e clica no bot√£o de busca
            const botaoBusca = document.querySelector('#btnBuscarCpf') || 
                              document.querySelector('.botao-login') ||
                              document.querySelector('button[type="submit"]');
            
            if (!botaoBusca) {
                throw new Error('Bot√£o de busca n√£o encontrado');
            }
            
            await utils.clicar(botaoBusca, 'bot√£o de busca');
            
            // Aguarda resultados
            await utils.esperar(2000);
            
            // Verifica se h√° clientes na lista
            if (utils.clientesDisponiveis()) {
                utils.log('Cliente(s) encontrado(s)!', 'sucesso');
                estado.cpfBuscado = true;
                estado.clienteEncontrado = true;
            } else {
                utils.log('Nenhum cliente encontrado para o CPF informado', 'aviso');
                estado.cpfBuscado = true;
                estado.clienteEncontrado = false;
            }
        } catch (erro) {
            utils.log(`Erro ao buscar CPF: ${erro.message}`, 'erro');
            throw erro;
        }
    },
    
    // Atende o cliente
    atenderCliente: async function() {
        if (!estado.clienteEncontrado) {
            throw new Error('Nenhum cliente dispon√≠vel para atendimento');
        }
        
        utils.log('Atendendo cliente...', 'info');
        
        try {
            // Encontra o primeiro bot√£o "Atender"
            const botoesAtender = document.querySelectorAll('.btn-atender');
            
            if (botoesAtender.length === 0) {
                throw new Error('Bot√£o "Atender" n√£o encontrado');
            }
            
            // Clica no primeiro bot√£o
            await utils.clicar(botoesAtender[0], 'bot√£o Atender');
            
            // Atualiza o estado
            utils.log('Cliente atendido com sucesso!', 'sucesso');
            estado.clienteAtendido = true;
            
        } catch (erro) {
            utils.log(`Erro ao atender cliente: ${erro.message}`, 'erro');
            throw erro;
        }
    },
    
    // Imprime OFEX
    imprimirOFEX: async function() {
        if (!estado.clienteAtendido) {
            throw new Error('√â necess√°rio atender o cliente antes de imprimir OFEX');
        }
        
        utils.log('Tentando imprimir OFEX...', 'info');
        
        try {
            // Tenta encontrar o bot√£o OFEX
            const botaoOFEX = await utils.encontrarElemento('#btnImprimirOFEX') || 
                             await utils.encontrarElemento('//button[contains(text(), "OFEX")]', 'xpath');
            
            if (!botaoOFEX) {
                throw new Error('Bot√£o de impress√£o OFEX n√£o encontrado');
            }
            
            // Clica no bot√£o
            await utils.clicar(botaoOFEX, 'bot√£o OFEX');
            
            // Trata poss√≠veis di√°logos de confirma√ß√£o
            await utils.esperar(1000);
            
            // Atualiza o estado
            utils.log('OFEX impresso com sucesso!', 'sucesso');
            estado.ofexGerado = true;
            
        } catch (erro) {
            utils.log(`Erro ao imprimir OFEX: ${erro.message}`, 'erro');
            // N√£o lan√ßa erro, pois esta √© uma etapa opcional
            utils.log('Continuando sem impress√£o OFEX', 'aviso');
        }
    }
};

// Interface principal da automa√ß√£o
const DrogasilAutomacao = {
    // Inicia a automa√ß√£o
    iniciar: async function(matricula, cpf) {
        // Atualiza a configura√ß√£o, se fornecida
        if (matricula) config.matricula = matricula;
        if (cpf) config.cpf = cpf;
        
        // Valida os dados
        if (!config.matricula || config.matricula.length < 4) {
            utils.log('Matr√≠cula inv√°lida', 'erro');
            return false;
        }
        
        if (!config.cpf || config.cpf.length < 9) {
            utils.log('CPF inv√°lido', 'erro');
            return false;
        }
        
        // Inicia a automa√ß√£o
        return await operacoes.iniciar();
    },
    
    // Configura a automa√ß√£o
    configurar: function(novaConfig) {
        Object.assign(config, novaConfig);
        utils.log('Configura√ß√£o atualizada', 'info');
        console.log('Configura√ß√£o atual:', config);
        return config;
    },
    
    // Exibe o status atual
    status: function() {
        return estado;
    },
    
    // Exibe ajuda
    ajuda: function() {
        console.log(`
%cAutoma√ß√£o Terminal Drogasil - Ajuda
%c
Esta automa√ß√£o permite realizar opera√ß√µes no Terminal de Consulta da Drogasil.

Comandos dispon√≠veis:
- DrogasilAutomacao.iniciar([matricula], [cpf]) - Inicia a automa√ß√£o
- DrogasilAutomacao.configurar({...}) - Altera as configura√ß√µes
- DrogasilAutomacao.status() - Mostra o status atual da automa√ß√£o
- DrogasilAutomacao.ajuda() - Mostra esta ajuda

Exemplo de uso:
> DrogasilAutomacao.configurar({ matricula: "123456", cpf: "12345678900" })
> DrogasilAutomacao.iniciar()

Outros exemplos:
> DrogasilAutomacao.iniciar("123456", "12345678900")
> DrogasilAutomacao.configurar({ tempoEspera: 1000, autoAtendimento: false })
`,
        'color: #C41E3A; font-size: 14px; font-weight: bold',
        'color: #333; font-size: 13px'
        );
    }
};

// Exibir instru√ß√µes iniciais
console.log(`
%cAutoma√ß√£o Terminal Drogasil v1.0
%c
Script para automatizar o Terminal de Consulta da Drogasil.
Para iniciar, execute:

DrogasilAutomacao.iniciar("sua_matricula", "cpf_cliente")

ou configure primeiro e depois inicie:

DrogasilAutomacao.configurar({ matricula: "sua_matricula", cpf: "cpf_cliente" })
DrogasilAutomacao.iniciar()

Para ver a ajuda completa, digite: DrogasilAutomacao.ajuda()
`,
'color: #C41E3A; font-size: 16px; font-weight: bold',
'color: #333; font-size: 14px'
);

// Retorna o objeto de automa√ß√£o para uso
DrogasilAutomacao;